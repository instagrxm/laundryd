import { Collection, Db, MongoClient } from "mongodb";
import { Item } from "../core/item";
import { Memory } from "../core/memory";

/**
 * Helper class for database functions.
 */
export class Database {
  private db!: Db;
  private memory!: Collection<any>;

  /**
   * Set up the database connection.
   * @param connection a mongodb:// connection string
   */
  async init(connection: string): Promise<void> {
    const client = await new MongoClient(connection, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    }).connect();
    this.db = client.db();

    this.memory = this.db.collection("memory");
    await this.memory.createIndex("washerId", { unique: true });
  }

  /**
   * Return the memory object for a washer, or an empty object if there isn't one.
   * @param washerId the unique ID of the washer
   */
  async loadMemory(washerId: string): Promise<Memory> {
    const memory = await this.memory.findOne({ washerId });
    return memory || {};
  }

  /**
   * Save the memory object for a washer.
   * @param washerId the unique ID of the washer
   * @param memory the memory object
   */
  async saveMemory(washerId: string, memory: Memory): Promise<void> {
    await this.memory.replaceOne(
      { washerId },
      { $set: memory },
      { upsert: true }
    );
  }

  /**
   * Get items from a washer newer than a given date.
   * @param washerId the unique ID of the washer
   * @param since return items newer than this date
   */
  async loadItems(washerId: string, since: Date): Promise<Item[]> {
    return this.db
      .collection(washerId)
      .find(
        {
          date: { $gt: since }
        },
        { sort: { date: -1 } }
      )
      .toArray();
  }

  /**
   * Save new items generated by a washer
   * @param washerId the unique ID of the washer
   * @param items the items generated by the washer
   */
  async saveItems(washerId: string, items: Item[]): Promise<void> {
    if (!items.length) {
      return;
    }

    const collection = this.db.collection(washerId);
    await collection.createIndex("date");
    await collection.insertMany(items);
  }
}
